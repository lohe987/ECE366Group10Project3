00010001 # ADDI / R0 ++  r0=2  10
11010010 # LOAD R1 = M[R0] = M[2]   r1=2
00010001 # ADDI / R0 ++  r0=3
01011010 # STORE M[R0] = M[3]  R1   2--->
11100001 # R1 = R1 << 1
01011010 # STORE M[R0] = R1
01010110 # LOAD R3 = M[R0] = M[2]
10011001 # Addi R2 = 1
10010101 # Addi R1 = 1
11100010 # LSL R2 = 2
11100010 # LSL R2 = 4
10000010 # R0 = R0 + R2 should be 2
01100101 # will nxor R0 with R1 and store result in R0 r0=0111 r1=0001 r=1001 or -7
10010101 # addi r1=2
10010101 # addi r1=3
11101101 # will take two's complement of R1 = 3 ----> -3
11111001 # store r1 into sr1
11110101 # reset r1 to hold value 0
01110001 # load sr1 into r1 which will be -3
11111111 # end
00010001 # ADDI / R0 ++ #end will skip these lines
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++
00010001 # ADDI / R0 ++